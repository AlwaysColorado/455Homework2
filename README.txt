====================================
|         Team Composition         |
====================================

Lauren Dziak
Meridith McCann
Max Whelan

====================================
|         Notes for Grader         |
====================================

Upon untarring the file, run the command `gradle build`.
This will produce a folder called build, which contains the executable jar in the folder build/libs.

To run the program, run the jar with the following commands and arguments:
Server: java -cp <path to jar> cs455.scaling.server.Server <Port Number> <Thread Pool Size> <Batch Size> <Batch Time>
Client: java -cp <path to jar> cs455.scaling.client.Client <Server Name> <Port Number> <Message/s Rate>

Note: The server should be running before the clients are started.
The clients will terminate execution after 10 minutes have passed since startup.

====================================
|          File Manifest           |
====================================
README.txt                                          | this file.
build.gradle                                        | gradle file.
runner.sh                                           | [optional] script to run clients. "bash runner.sh [serverHostName] [serverPort] [messageRate]"
src
└───main
    └───java
        └───cs455
            └───scaling
                ├───client
                │       Client.java                 | Describes a Client. Immediately tries to connect to the specified server.
                │       ClientMessageTimer.java     | TaskTimer for a Client to send a message to the server at the specified rate.
                │       ClientPrintTimer.java       | TaskTimer for a Client to print the total messages sent and received in the last 20 seconds.
                │       ClientTimer.java            | TaskTimer for a Client to time itself out after 10 minutes.
                │
                ├───server
                │       Server.java                 | Describes a Server. Listens for connections from Clients, then handles their traffic using ThreadPool.
                │       ServerStatistics.java       | TaskTimer for the Server to print the statistics about the Client connections every 20 seconds.
                │
                ├───tasks
                │       HANDLE_TRAFFIC.java         | A task generated by the Server and sent to the ThreadPoolManager to read a packet from the client and respond.
                │       REGISTER_CLIENT.java        | A task generated by the Server to register a Client to its selector.
                │       Task.java                   | An abstract task that describes actions available to a Task. (executeTask())
                │       TaskType.java               | An Enum for dereferencing an abstract task into its type.
                │
                ├───threadpool
                │       ThreadPool.java             | Describes the ThreadPool. Keeps an array of Worker threads and a list of work, and assigns the Workers a batch of work when they are available.
                │       ThreadPoolManager.java      | Manages the ThreadPool's task queue. Reads in Tasks from the Server, organizes them, and sends them to the thread pool to be worked on.
                │       Worker.java                 | A worker thread. Given a list of tasks from the threadpool, this will loop through it, executing each one until it's finished.
                │
                └───util
                        Buffers.java                | A collection of two buffers, one for reading and one for writing, to be attached to a client's key to save memory and prevent concurrent read/writes.
                        Hashing.java                | Returns the SHA1 string for a given message.
